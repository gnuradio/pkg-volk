From a654889970fb844a21c8e43ca10eda6140ad6351 Mon Sep 17 00:00:00 2001
From: Geof Nieboer <gnieboer@gcndevelopment.com>
Date: Mon, 2 May 2016 22:37:46 +0300
Subject: [PATCH 7/8] Removes compiler flags from MSVC builds

Unlike GCC, MSVC does not require /arch flags to generate intrinsics for an instruction set.  However, it the flag is present, it will attempt to optimize *all* the code for that .c file.  Unfortunately, it will even optimize code in the dynamic initializer of the class (at least MSVC 2015 will).

This will cause volk to crash when running on machine without AVX as the initializer appears to be called outside of CPU guard checks.

Tested removal of the flags and found only a minor difference in performance on an AVX2 CPU and volk_profile built on an AVX2 machine ran successfully on a SSE4.1 CPU (which it crashed on previously).

volk_profile time to execute in default settings:
MSVC Original: 62.4s
MSVC NoFlags: 66.3s
GCC   Original: 59.7s
old CPU NoFlags: 143.0sec
---
 lib/CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index 1accb59..810e63b 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -383,7 +383,7 @@ foreach(machine_name ${available_machines})
     )
     MESSAGE(STATUS "BUILD INFO ::: ${machine_name} ::: ${COMPILER_NAME} ::: ${CMAKE_C_FLAGS_${CBTU}} ${CMAKE_C_FLAGS} ${${machine_name}_flags}")
     set(COMPILER_INFO "${COMPILER_INFO}${machine_name}:::${COMPILER_NAME}:::${CMAKE_C_FLAGS_${CBTU}} ${CMAKE_C_FLAGS} ${${machine_name}_flags}\n" )
-    if(${machine_name}_flags)
+    if(${machine_name}_flags AND NOT MSVC)
         set_source_files_properties(${machine_source} PROPERTIES COMPILE_FLAGS "${${machine_name}_flags}")
     endif()
 
-- 
2.1.4

